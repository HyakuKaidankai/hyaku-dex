---
import Layout from "../../layouts/Layout.astro";

import SpeciesHeader from "../../components/dex/species/SpeciesHeader.astro";
import SpeciesImage from "../../components/dex/species/SpeciesImage.astro";
import StatTable from "../../components/dex/species/StatTable.astro";
import EvolutionLine from "../../components/dex/species/evolution/EvolutionLine.astro";
import AbilityList from "../../components/dex/species/ability/AbilityList.astro";
import OtherInfo from "../../components/dex/species/OtherInfo.astro";
import SkillList from "../../components/dex/species/SkillList.astro";
import CapabilitiesList from "../../components/dex/species/CapabilitiesList.astro";
import MoveListTable from "../../components/dex/species/moves/MoveListTable.astro";

import { listPkmn, getPkmn, getPkmnDexInfo } from "../../components/functions/pokemon.ts";
import { listMoves } from '../../components/functions/move.ts';

// Find the specific Pokémon data based on the dynamic parameter
const { pkmnSpecies } = Astro.params;
const pkmn = getPkmn( pkmnSpecies );
if (!pkmn) {
  // Handle the case where the Pokémon is not found
  return Response.redirect('/404', 302);
}

export function getStaticPaths() {
    let ret: { params: { pkmnSpecies: string } }[] = [];
    for(let pkmn of listPkmn()){
        let static_param = {
            params: {
                pkmnSpecies: pkmn["Species Name"]
            }
        }
        ret.push(static_param)
    }    
    return ret;
}

const isMew = pkmn["Species Name"].toLowerCase() == "mew";
const isZygarde = pkmnSpecies.toLowerCase().includes("zygarde");
const isHoopa = pkmnSpecies.toLowerCase().includes("hoopa");
const moves = getPkmnDexInfo(pkmn["Species Name"]).move;

let otherMoveList = []
if(isMew) {
  otherMoveList = listMoves().map((move:any) => {
      const { Name, ...rest } = move;
      return { name: Name, ...rest };
  });
} else {
  otherMoveList = moves.other
}

---
<Layout>    
    <div class="m-[20px] flex flex-wrap gap-2">
        <div id="header" class="w-full flex flex-wrap gap-2">
            <div class="card bg-base-200 text-neutral-content border-base-300 rounded-box border">
                <div class="card-body p-[15px] grid grid-col-4">
                    <a href="/hyaku-dex"><button class="btn btn-outline border-2 border-pkb-red hover:bg-pkb-red">Back to dex</button></a>     
                </div>
            </div>
            <SpeciesHeader pkmn={ pkmn }/>
        </div>
        <div class="flex gap-2 flex-wrap">    
            <div class="flex flex-col gap-2 w-full md:w-[350px]">
                <SpeciesImage pkmn={ pkmn } />      
                <StatTable pkmn={pkmn} /> 
                <EvolutionLine pkmn={pkmn} />
            </div>   
            <div class="flex flex-col gap-2 w-full md:w-auto">
                <AbilityList pkmn={pkmn} />
                <OtherInfo pkmn={pkmn} />
            </div>
            <div class="flex flex-col gap-2 w-full md:w-auto">     
                <SkillList pkmn={pkmn} />       
                <CapabilitiesList pkmn={pkmn} />
            </div>
            <div class="flex flex-col gap-2 w-full md:w-auto">
                <MoveListTable title="Move list" pkmn={pkmn} enableLvCol={true} moves={ moves.lv } />
                {isHoopa && 
                <MoveListTable title="Linked move list" pkmn={pkmn} moves={ moves.linked } />}    
                {isZygarde &&                 
                <MoveListTable title="Zygarde Core move list" pkmn={pkmn} moves={ moves.core } />}       
            </div>
            <div class="flex flex-col gap-2 w-full md:w-auto">
                <MoveListTable title="TM/Tutor list" pkmn={pkmn} moves={otherMoveList} enableNatCol={true} enablePagination={true} />
            </div>
        </div>
    </div>
</Layout>