---
import MoveModalBox from './MoveModalBox.astro';

import { getPkmnDexInfo } from '../../functions/pokemon.ts';
import { listMoves, getMove } from '../../functions/move.ts';

const { pkmn } = Astro.props;

const isMew = pkmn["Species Name"].toLowerCase() == "mew"

const moveList = !isMew ? (getPkmnDexInfo(pkmn["Species Name"]).move.other) : listMoves() ;

function isStab(pkmn: any, type: any) {
  let matchFirst = type["Type__1"].toLowerCase() === pkmn["Type1"].toLowerCase();
  let matchSecond = type["Type__1"].toLowerCase() === pkmn["Type2"].toLowerCase();
  return ( (matchFirst || matchSecond) );
}

const movesPerPage = 28
const numberOfPages = Math.ceil(moveList.length / movesPerPage)
const pagesMap = [...Array(numberOfPages).keys()]

---
<div class="card bg-base-200 text-neutral-content border-base-300 rounded-box border">
    <div class="card-body p-[15px]">
        <p class="px-4 pb-2 text-xs opacity-60 tracking-wide">TM/Tutor list</p>
        <div class="overflow-x-auto">
            <table class="table table-xs">
              <thead>
                <tr>
                  <th></th>
                  <th>Move</th>
                  <th>Type</th>
                </tr>
              </thead>
              <tbody>
                {!isMew && moveList.map((move: any, index: any) => {
                  const modalId = (`lvmove${move.name.replace(" ","").replace("-","").replace("*","")}`)
                  const pageNumber = Math.ceil((index + 1) / movesPerPage);
                  if(!getMove(move.name)){
                    console.log(move.name);
                  }
                  return (
                    <tr class={`hover:bg-base-300 cursor-pointer other-move-row page-${pageNumber}`} onclick={`${modalId}.showModal()`}>
                        <td>{move.natural && "(N)"} </td>
                        <td class={`${move.sgn && "text-pkb-red font-semibold"}`}>{move.name}</td>
                        <td class={`${isStab(pkmn, getMove(move.name)) && "text-pkb-red font-semibold"}`}>{getMove(move.name)["Type__1"] ?? "Unknown"}</td>
                    </tr>
                  )
                })}
                {isMew && moveList.map((move: any, index: any) => {
                  const modalId = (`lvmove${move.Name.replace(" ","").replace("-","").replace("*","")}`)
                  const pageNumber = Math.ceil((index + 1) / movesPerPage);
                  return (
                    <tr class={`hover:bg-base-300 cursor-pointer other-move-row page-${pageNumber}`} onclick={`${modalId}.showModal()`}>
                        <td class={`${move.sgn && "text-pkb-red font-semibold"}`}>{move.Name}</td>
                        <td class={`${isStab(pkmn, move) && "text-pkb-red font-semibold"}`}>{move["Type__1"] ?? "Unknown"}</td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
            <div class="join w-full justify-center">
              {pagesMap.map((i: any) => {
                return (
                <button class="join-item btn btn-sm" onclick={`showPage(${i + 1})`}>{i + 1}</button>
                )
              })}
            </div>            
            {!isMew && moveList.map((move: any) => {
                  const modalId = (`lvmove${move.name.replace(" ","").replace("-","").replace("*","")}`)
              return ( <MoveModalBox modalId={modalId} moveName={move.name}/> )
            })}
            {isMew && moveList.map((move: any) => {
              const modalId = (`lvmove${move.Name.replace(" ","").replace("-","").replace("*","")}`)
              return ( <MoveModalBox modalId={modalId} moveName={move.Name}/> )
            })}
    </div>
</div>

<script is:inline>
  function showPage(pageNumber) {
    // Hide all rows
    document.querySelectorAll(`.other-move-row`).forEach(row => {
      row.style.display = 'none';
    });

    // Show rows for the selected page
    document.querySelectorAll(`.page-${pageNumber}`).forEach(row => {
      row.style.display = '';
    });
  }

  // Show the first page by default
  showPage(1);
</script>